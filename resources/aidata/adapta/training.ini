[TrainingInfo]
#how many matches each vector is tested in before being evaluated
MatchNumberTarget = 1
#file where to load population on start
PopulationFileName = "resources/aidata/adapta/pop_record_last.json"
#stop training after this amount of generations
MaxGenerationCount = 20

[SaveInfo]
#indexes and params to save circularly N files, and keep a history of N files. Start overwriting from the NextSaveIndex
NextSaveIndex = 0
MaxSaveIndex = 10
SaveNamePrefix = "resources/aidata/adapta/pop_record_"
SaveNameExtension = ".json"

#where to save a copy of the most recent save
SaveNameMostRecent = "resources/aidata/adapta/pop_record_last.json"
#save a new population when a new best fitness is found?
SaveOnNewBestFit = true
#Save in any case after N generations passed without any new save? If > 0 this specifies this amount
GenerationNumberTargetSave = 3
#Keep a separate file in where are stored N vectors, representing the best fitnesses of all time.
#Specify how many should be stored and where
BestRecordsToSave = 10
SaveNameBestRecords = "resources/aidata/adapta/best_records_alltime.json"

[CurrentState]
#this is the current state that can be saved if the training should stop while in the middle of computing performances of a generation
#(todo complete the savestate stuff in case of halting the training mid-run, since some stuff is missing)
CurrWVIndex = 0
CurrWVMatchNumber = 0
CurrBestSavedFitness = -8

[EvolutionManager]
#params to set the evolution manager's characteristics
PopulationSize = 6
WeightVectorLength = 4
#at each new gen, copy this amount of best vectors of the previous gen
ElitismDegree = 2
#at each new gen, create this amount of totally random new vectors. This should be an element of exploration kept alive
RandomismDegree = 1
#start from this generation. It doesn't affect evolution
Generation = 0
#min and max weights amounts the population vectors can have.
MinWeight = -10
MaxWeight = 10
#see EvoEnums.h (0 is splitMiddle, 1 is splitRandom, 2 is mixRandom, 3 is custom)
CrossoverFunction = 2